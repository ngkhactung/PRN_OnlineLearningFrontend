import { useState, useEffect } from "react"
import { Table, Button, message, Popconfirm, Space, Modal, Form, Input, InputNumber, Select } from "antd"
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  ArrowLeftOutlined,
  BookOutlined,
  QuestionCircleOutlined,
} from "@ant-design/icons"
import { api } from "../../services/apiClient"
import { useParams, useNavigate } from "react-router-dom"

const API_BASE_URL = "https://localhost:5000" // Backend URL

function ManaModule() {
  const { courseId } = useParams()
  const navigate = useNavigate()
  const [modules, setModules] = useState([])
  const [loading, setLoading] = useState(false)
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0,
  })
  const [isModalVisible, setIsModalVisible] = useState(false)
  const [editingModule, setEditingModule] = useState(null) // null for add, object for edit
  const [form] = Form.useForm()
  const [courseName, setCourseName] = useState("") // To display the course name

  useEffect(() => {
    fetchModules()
    fetchCourseName()
  }, [pagination.current, pagination.pageSize, courseId]) // ‚úÖ B·ªè searchText v√† filterStatus

  // READ: L·∫•y t√™n kh√≥a h·ªçc ƒë·ªÉ hi·ªÉn th·ªã
  const fetchCourseName = async () => {
    try {
      const res = await api.get(`/admin/Courses/${courseId}`)
      setCourseName(res.data.courseName)
    } catch (error) {
      console.error("Fetch Course Name Error:", error.response?.data || error.message)
      message.error("Kh√¥ng th·ªÉ t·∫£i t√™n kh√≥a h·ªçc.")
    }
  }

  // READ: L·∫•y danh s√°ch module
  const fetchModules = async () => {
    setLoading(true)
    try {
      const res = await api.get(`/admin/Modules`, {
        params: {
          courseId: courseId,
          page: pagination.current,
          pageSize: pagination.pageSize,
          // ‚úÖ B·ªè search v√† status parameters
        },
      })
      if (!Array.isArray(res.data)) {
        throw new Error("API response for modules is not an array")
      }
      setModules(res.data.map((mod) => ({ ...mod, key: mod.moduleID })))
      setPagination((prev) => ({
        ...prev,
        total: Number.parseInt(res.headers["x-total-count"]) || 0,
      }))
    } catch (error) {
      console.error("Fetch Modules Error:", error.response?.data || error.message)
      message.error(
        error.response?.status === 404
          ? "API kh√¥ng t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh backend."
          : error.response?.status === 500
            ? "L·ªói server. Vui l√≤ng li√™n h·ªá admin."
            : "Kh√¥ng th·ªÉ t·∫£i danh s√°ch module. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c CORS.",
      )
    } finally {
      setLoading(false)
    }
  }

  // CREATE: M·ªü modal ƒë·ªÉ th√™m module m·ªõi
  const handleAdd = () => {
    setEditingModule(null) // ƒê·∫∑t null ƒë·ªÉ bi·∫øt l√† ƒëang th√™m m·ªõi
    form.resetFields() // X√≥a d·ªØ li·ªáu c≈© trong form
    setIsModalVisible(true)
  }

  // UPDATE: M·ªü modal ƒë·ªÉ ch·ªânh s·ª≠a module
  const handleEdit = (record) => {
    setEditingModule(record) // ƒê·∫∑t ƒë·ªëi t∆∞·ª£ng module ƒë·ªÉ bi·∫øt l√† ƒëang ch·ªânh s·ª≠a
    form.setFieldsValue({
      moduleName: record.moduleName,
      moduleNumber: record.moduleNumber,
      status: record.status,
    })
    setIsModalVisible(true)
  }

  // DELETE: X√≥a module
  const handleDelete = async (moduleId) => {
    try {
      const res = await api.delete(`/admin/Modules/${moduleId}`)
      message.success("ƒê√£ x√≥a module th√†nh c√¥ng")
      fetchModules() // T·∫£i l·∫°i danh s√°ch sau khi x√≥a
    } catch (error) {
      console.error("Delete Module Error:", error.response?.data || error.message)
      message.error(
        error.response?.status === 400
          ? error.response?.data || "Kh√¥ng th·ªÉ x√≥a module c√≥ b√†i h·ªçc ho·∫∑c c√¢u ƒë·ªë."
          : error.response?.status === 404
            ? "Module kh√¥ng t·ªìn t·∫°i"
            : error.response?.status === 500
              ? "L·ªói server khi x√≥a module"
              : "Kh√¥ng th·ªÉ x√≥a module",
      )
    }
  }

  // CREATE/UPDATE: X·ª≠ l√Ω khi g·ª≠i form (th√™m m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
  const onFinish = async (values) => {
    try {
      if (editingModule) {
        // UPDATE: G·ª≠i y√™u c·∫ßu PUT n·∫øu ƒëang ch·ªânh s·ª≠a
        const res = await api.put(`/admin/Modules/${editingModule.moduleID}`, {
          moduleName: values.moduleName,
          moduleNumber: values.moduleNumber,
          status: values.status,
        })
        message.success("C·∫≠p nh·∫≠t module th√†nh c√¥ng")
      } else {
        // CREATE: G·ª≠i y√™u c·∫ßu POST n·∫øu ƒëang th√™m m·ªõi
        const res = await api.post(`/admin/Modules`, {
          courseID: courseId, // G·ª≠i k√®m courseId
          moduleName: values.moduleName,
          moduleNumber: values.moduleNumber || 0, // G·ª≠i 0 n·∫øu kh√¥ng cung c·∫•p, backend s·∫Ω t·ª± ƒë·ªông t·∫°o
          status: values.status !== undefined ? values.status : 1, // ‚úÖ S·ª≠a l·ªói: Ki·ªÉm tra undefined thay v√¨ falsy
        })
        message.success("Th√™m module m·ªõi th√†nh c√¥ng")
      }
      setIsModalVisible(false) // ƒê√≥ng modal
      fetchModules() // T·∫£i l·∫°i danh s√°ch sau khi th√™m/c·∫≠p nh·∫≠t
    } catch (error) {
      console.error("Module Operation Error:", error.response?.data || error.message)
      message.error("Thao t√°c module th·∫•t b·∫°i: " + (error.response?.data || error.message))
    }
  }

  const columns = [
    {
      title: "STT",
      render: (_, __, index) => (pagination.current - 1) * pagination.pageSize + index + 1,
      key: "index",
      width: 60,
      align: "center",
    },
    {
      title: "T√™n Module",
      dataIndex: "moduleName",
      key: "moduleName",
      width: 200,
      ellipsis: true,
    },
    {
      title: "S·ªë th·ª© t·ª± Module",
      dataIndex: "moduleNumber",
      key: "moduleNumber",
      width: 120,
      align: "center",
    },
    {
      title: "S·ªë b√†i h·ªçc",
      dataIndex: "lessonCount",
      key: "lessonCount",
      width: 100,
      align: "center",
    },
    {
      title: "S·ªë c√¢u ƒë·ªë",
      dataIndex: "quizCount",
      key: "quizCount",
      width: 100,
      align: "center",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      width: 100,
      align: "center",
      render: (status) => {
        const statusText = status === 1 ? "Ho·∫°t ƒë·ªông" : "B·∫£n nh√°p"
        return (
          <span
            style={{
              padding: "4px 8px",
              borderRadius: "4px",
              fontSize: "12px",
              color: status === 1 ? "#52c41a" : "#faad14",
              backgroundColor: status === 1 ? "#f6ffed" : "#fffbe6",
              border: `1px solid ${status === 1 ? "#b7eb8f" : "#ffe58f"}`,
            }}
          >
            {statusText}
          </span>
        )
      },
    },
    {
      title: "Thao t√°c",
      key: "actions",
      render: (_, record) => (
        <Space size="small">
          <Button type="primary" size="small" icon={<EditOutlined />} onClick={() => handleEdit(record)}>
            S·ª≠a
          </Button>
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a module n√†y?"
            description="H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c. Module c√≥ b√†i h·ªçc ho·∫∑c c√¢u ƒë·ªë kh√¥ng th·ªÉ x√≥a."
            onConfirm={() => handleDelete(record.moduleID)}
            okText="C√≥"
            cancelText="Kh√¥ng"
          >
            <Button danger size="small" icon={<DeleteOutlined />}>
              X√≥a
            </Button>
          </Popconfirm>
        </Space>
      ),
      width: 140,
      fixed: "right",
    },
    {
      title: "Thao t√°c B√†i h·ªçc",
      key: "lessonActions",
      render: (_, record) => (
        <Button
          icon={<BookOutlined />}
          onClick={() => navigate(`/admin/courses/${courseId}/modules/${record.moduleID}/lessons`)}
        >
          Qu·∫£n l√Ω B√†i h·ªçc
        </Button>
      ),
      width: 160,
      fixed: "right",
    },
    {
      title: "Thao t√°c C√¢u ƒë·ªë",
      key: "quizActions",
      render: (_, record) => (
        <Button
          icon={<QuestionCircleOutlined />}
          onClick={() => navigate(`/admin/courses/${courseId}/modules/${record.moduleID}/quizzes`)}
        >
          Qu·∫£n l√Ω C√¢u ƒë·ªë
        </Button>
      ),
      width: 160,
      fixed: "right",
    },
  ]

  const handleTableChange = (newPagination) => {
    setPagination({
      ...pagination,
      current: newPagination.current,
      pageSize: newPagination.pageSize,
    })
  }

  return (
    <div>
      <div style={{ marginBottom: "24px" }}>
        <Space>
          <Button icon={<ArrowLeftOutlined />} onClick={() => navigate("/admin/courses")}>
            Quay l·∫°i danh s√°ch kh√≥a h·ªçc
          </Button>
        </Space>
        <h2 style={{ margin: "8px 0 0 0", fontSize: "24px", fontWeight: "bold" }}>
          üìö Qu·∫£n l√Ω Module c·ªßa kh√≥a h·ªçc: {courseName}
        </h2>
        <p style={{ margin: "4px 0 0 0", color: "#666" }}>Qu·∫£n l√Ω c√°c module cho kh√≥a h·ªçc "{courseName}"</p>
      </div>

      {/* ‚úÖ B·ªè ph·∫ßn t√¨m ki·∫øm v√† filter, ch·ªâ gi·ªØ l·∫°i button th√™m m·ªõi */}
      <div style={{ display: "flex", justifyContent: "flex-end", marginBottom: "16px" }}>
        <Button type="primary" icon={<PlusOutlined />} onClick={handleAdd}>
          Th√™m Module m·ªõi
        </Button>
      </div>

      <div
        style={{
          background: "#fff",
          padding: "24px",
          borderRadius: "8px",
          boxShadow:
            "0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)",
        }}
      >
        <Table
          columns={columns}
          dataSource={modules}
          rowKey={(record) => record.key}
          loading={loading}
          pagination={{
            ...pagination,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) => `${range[0]}-${range[1]} c·ªßa ${total} module`,
          }}
          onChange={handleTableChange}
          scroll={{ x: 1200 }}
          size="middle"
        />
      </div>

      <Modal
        title={editingModule ? "Ch·ªânh s·ª≠a Module" : "Th√™m Module m·ªõi"}
        open={isModalVisible}
        onCancel={() => setIsModalVisible(false)}
        footer={null}
      >
        <Form form={form} layout="vertical" onFinish={onFinish}>
          <Form.Item
            label="T√™n Module"
            name="moduleName"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p t√™n module" },
              { max: 255, message: "T√™n module t·ªëi ƒëa 255 k√Ω t·ª±" }
            ]}
          >
            <Input placeholder="Nh·∫≠p t√™n module" />
          </Form.Item>
          <Form.Item
            label="S·ªë th·ª© t·ª± Module"
            name="moduleNumber"
            tooltip="ƒê·ªÉ tr·ªëng n·∫øu mu·ªën t·ª± ƒë·ªông t·∫°o s·ªë th·ª© t·ª± ti·∫øp theo"
            rules={[
              { type: "number", min: 0, message: "S·ªë th·ª© t·ª± module ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0" }
            ]}
          >
            <InputNumber min={0} placeholder="V√≠ d·ª•: 1, 2, 3..." style={{ width: "100%" }} />
          </Form.Item>
          <Form.Item
            label="Tr·∫°ng th√°i"
            name="status"
            rules={[
              { required: true, message: "Vui l√≤ng ch·ªçn tr·∫°ng th√°i" }
            ]}
            initialValue={1}
          >
            <Select placeholder="Ch·ªçn tr·∫°ng th√°i">
              <Select.Option value={0}>B·∫£n nh√°p</Select.Option>
              <Select.Option value={1}>Ho·∫°t ƒë·ªông</Select.Option>
            </Select>
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit">
              {editingModule ? "C·∫≠p nh·∫≠t" : "Th√™m m·ªõi"}
            </Button>
            <Button onClick={() => setIsModalVisible(false)} style={{ marginLeft: 8 }}>
              H·ªßy
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  )
}

export default ManaModule
